"""
A set of interface for tree.

$INTERFACE_LIST
"""
module Tree

using Liang: not_implemented_error
using Liang.Tools.Interface: @interface, INTERFACE, INTERFACE_LIST
using Transducers: Map, tcollect
using DocStringExtensions

"""
$INTERFACE

Return the children of a node.
"""
@interface (children(node::T)::Vector{T}) where {T} = T[]

"""
$INTERFACE

Return the number of children of the provided node.
"""
@interface n_children(node)::Int = length(children(node))

"""
$INTERFACE

Map a function to the children of a node, and return the
new node with the mapped children.

!!! note
    This usually provides better performance than calling
    [`substitute`](@ref) with a dictionary, since it avoids
    unnecessary copying of the node.
"""
@interface map_children(f, node) = generated_map_children(f, node)

"""
$INTERFACE

Similar to [`map_children`](@ref), but this function is generated by some meta-programming
tool, leaving possibility for users to overload `map_children` on their own types.
"""
@interface generated_map_children(f, node) = not_implemented_error()

"""
$INTERFACE

Similar to [`map_children`](@ref), except the function `f` is
applied asynchronously via `Threads.@spawn` to the children of a node.
"""
@interface threaded_map_children(f, node) = generated_threaded_map_children(f, node)

"""
$INTERFACE

Similar to [`threaded_map_children`](@ref), but this function is generated by some meta-programming
tool, leaving possibility for users to overload `threaded_map_children` on their own types.
"""
@interface generated_threaded_map_children(f, node) = not_implemented_error()

"""
$INTERFACE

Substitute a (non-leaf) node with given children.
"""
@interface substitute(node, replace::Dict) =
    map_children(node) do child
        get(replace, child, child)
    end

"""
$INTERFACE

Check if a node is a leaf node.
"""
@interface is_leaf(node) = isempty(children(node))

include("tools.jl")
include("acset.jl")
include("print/mod.jl")

end # module Tree
