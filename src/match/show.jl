function Data.show_data(io::IO, x::Pattern.Type)
    f = Data.FormatPrinter(io)
    if isa_variant(x, Pattern.Wildcard)
        f.print("_"; color=:red)
    elseif isa_variant(x, Pattern.Variable)
        f.print(x.:1)
    elseif isa_variant(x, Pattern.Constant)
        f.print("\$(", x.:1, ")")
    elseif isa_variant(x, Pattern.And)
        f.print("(")
        f.show(x.:1)
        f.print(") && ("; color=:red)
        f.show(x.:2)
        f.print(")")
    elseif isa_variant(x, Pattern.Call)
        f.show(x.head)
        f.print("(")
        for (idx, arg) in enumerate(x.args)
            idx > 1 && f.print(", ")
            f.show(arg)
        end
        if !isempty(x.kwargs)
            f.print("; ")
            for (idx, (key, val)) in enumerate(x.kwargs)
                idx > 1 && f.print(", ")
                f.print(key, "=", val)
            end
        end
        f.print(")")
    elseif isa_variant(x, Pattern.Dot)
        f.show(x.:1)
        f.print(".", x.:2)
    elseif isa_variant(x, Pattern.Tuple)
        f.print("(")
        for (idx, arg) in enumerate(x.xs)
            idx > 1 && f.print(", ")
            f.show(arg)
        end
        f.print(")")
    elseif isa_variant(x, Pattern.NamedTuple)
        f.print("(")
        for (idx, arg) in enumerate(x.xs)
            idx > 1 && f.print(", ")
            f.print(x.names[idx], "=", arg)
        end
        f.print(")")
    elseif isa_variant(x, Pattern.Vector)
        f.print("[")
        for (idx, arg) in enumerate(x.xs)
            idx > 1 && f.print(", ")
            f.show(arg)
        end
        f.print("]")
    elseif isa_variant(x, Pattern.VCat)
        f.print("[")
        for (idx, arg) in enumerate(x.xs)
            idx > 1 && f.print("; ")
            f.show(arg)
        end
        f.print("]")
    elseif isa_variant(x, Pattern.NCat)
        f.print("[")
        for (idx, arg) in enumerate(x.xs)
            idx > 1 && f.print(";"^x.n * " ")
            f.show(arg)
        end
        f.print("]")
    elseif isa_variant(x, Pattern.Splat)
        f.show(x.body)
        f.print("...")
    elseif isa_variant(x, Pattern.Comprehension)
        f.print("[")
        f.show(x.body)
        f.print(" for ")
        for (idx, var) in enumerate(x.vars)
            idx > 1 && f.print(", ")
            f.print(var)
        end
        f.print(" in ")
        for (idx, iter) in enumerate(x.iterators)
            idx > 1 && f.print(", ")
            f.show(iter)
        end
        if !isnothing(x.guard)
            f.print(" if ")
            f.show(x.guard)
        end
        f.print("]")
    else
        error("unknown pattern type: ", x)
    end
end
